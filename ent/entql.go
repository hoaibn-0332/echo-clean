// Code generated by ent, DO NOT EDIT.

package ent

import (
	"echo-clean/ent/article"
	"echo-clean/ent/author"
	"echo-clean/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   article.Table,
			Columns: article.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: article.FieldID,
			},
		},
		Type: "Article",
		Fields: map[string]*sqlgraph.FieldSpec{
			article.FieldTitle:     {Type: field.TypeString, Column: article.FieldTitle},
			article.FieldContent:   {Type: field.TypeString, Column: article.FieldContent},
			article.FieldCreatedAt: {Type: field.TypeTime, Column: article.FieldCreatedAt},
			article.FieldUpdatedAt: {Type: field.TypeTime, Column: article.FieldUpdatedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   author.Table,
			Columns: author.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: author.FieldID,
			},
		},
		Type: "Author",
		Fields: map[string]*sqlgraph.FieldSpec{
			author.FieldName:      {Type: field.TypeString, Column: author.FieldName},
			author.FieldCreatedAt: {Type: field.TypeTime, Column: author.FieldCreatedAt},
			author.FieldUpdatedAt: {Type: field.TypeTime, Column: author.FieldUpdatedAt},
		},
	}
	graph.MustAddE(
		"author",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   article.AuthorTable,
			Columns: []string{article.AuthorColumn},
			Bidi:    false,
		},
		"Article",
		"Author",
	)
	graph.MustAddE(
		"article",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   author.ArticleTable,
			Columns: []string{author.ArticleColumn},
			Bidi:    false,
		},
		"Author",
		"Article",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *ArticleQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ArticleQuery builder.
func (aq *ArticleQuery) Filter() *ArticleFilter {
	return &ArticleFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *ArticleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ArticleMutation builder.
func (m *ArticleMutation) Filter() *ArticleFilter {
	return &ArticleFilter{config: m.config, predicateAdder: m}
}

// ArticleFilter provides a generic filtering capability at runtime for ArticleQuery.
type ArticleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ArticleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ArticleFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(article.FieldID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *ArticleFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(article.FieldTitle))
}

// WhereContent applies the entql string predicate on the content field.
func (f *ArticleFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(article.FieldContent))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ArticleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(article.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ArticleFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(article.FieldUpdatedAt))
}

// WhereHasAuthor applies a predicate to check if query has an edge author.
func (f *ArticleFilter) WhereHasAuthor() {
	f.Where(entql.HasEdge("author"))
}

// WhereHasAuthorWith applies a predicate to check if query has an edge author with a given conditions (other predicates).
func (f *ArticleFilter) WhereHasAuthorWith(preds ...predicate.Author) {
	f.Where(entql.HasEdgeWith("author", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (aq *AuthorQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AuthorQuery builder.
func (aq *AuthorQuery) Filter() *AuthorFilter {
	return &AuthorFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AuthorMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AuthorMutation builder.
func (m *AuthorMutation) Filter() *AuthorFilter {
	return &AuthorFilter{config: m.config, predicateAdder: m}
}

// AuthorFilter provides a generic filtering capability at runtime for AuthorQuery.
type AuthorFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AuthorFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *AuthorFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(author.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *AuthorFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(author.FieldName))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AuthorFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(author.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AuthorFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(author.FieldUpdatedAt))
}

// WhereHasArticle applies a predicate to check if query has an edge article.
func (f *AuthorFilter) WhereHasArticle() {
	f.Where(entql.HasEdge("article"))
}

// WhereHasArticleWith applies a predicate to check if query has an edge article with a given conditions (other predicates).
func (f *AuthorFilter) WhereHasArticleWith(preds ...predicate.Article) {
	f.Where(entql.HasEdgeWith("article", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
