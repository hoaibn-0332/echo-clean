// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entity "echo-clean/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// AuthorRepository is an autogenerated mock type for the AuthorRepository type
type AuthorRepository struct {
	mock.Mock
}

type AuthorRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthorRepository) EXPECT() *AuthorRepository_Expecter {
	return &AuthorRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: id
func (_m *AuthorRepository) Delete(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthorRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AuthorRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int64
func (_e *AuthorRepository_Expecter) Delete(id interface{}) *AuthorRepository_Delete_Call {
	return &AuthorRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *AuthorRepository_Delete_Call) Run(run func(id int64)) *AuthorRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *AuthorRepository_Delete_Call) Return(_a0 error) *AuthorRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthorRepository_Delete_Call) RunAndReturn(run func(int64) error) *AuthorRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function with given fields:
func (_m *AuthorRepository) Fetch() ([]*entity.Author, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []*entity.Author
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entity.Author, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entity.Author); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Author)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorRepository_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type AuthorRepository_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
func (_e *AuthorRepository_Expecter) Fetch() *AuthorRepository_Fetch_Call {
	return &AuthorRepository_Fetch_Call{Call: _e.mock.On("Fetch")}
}

func (_c *AuthorRepository_Fetch_Call) Run(run func()) *AuthorRepository_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthorRepository_Fetch_Call) Return(_a0 []*entity.Author, _a1 error) *AuthorRepository_Fetch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthorRepository_Fetch_Call) RunAndReturn(run func() ([]*entity.Author, error)) *AuthorRepository_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *AuthorRepository) GetByID(id int64) (*entity.Author, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.Author, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.Author); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type AuthorRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id int64
func (_e *AuthorRepository_Expecter) GetByID(id interface{}) *AuthorRepository_GetByID_Call {
	return &AuthorRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *AuthorRepository_GetByID_Call) Run(run func(id int64)) *AuthorRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *AuthorRepository_GetByID_Call) Return(_a0 *entity.Author, _a1 error) *AuthorRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthorRepository_GetByID_Call) RunAndReturn(run func(int64) (*entity.Author, error)) *AuthorRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: name
func (_m *AuthorRepository) Store(name string) (*entity.Author, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 *entity.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Author, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Author); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorRepository_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type AuthorRepository_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - name string
func (_e *AuthorRepository_Expecter) Store(name interface{}) *AuthorRepository_Store_Call {
	return &AuthorRepository_Store_Call{Call: _e.mock.On("Store", name)}
}

func (_c *AuthorRepository_Store_Call) Run(run func(name string)) *AuthorRepository_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AuthorRepository_Store_Call) Return(_a0 *entity.Author, _a1 error) *AuthorRepository_Store_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthorRepository_Store_Call) RunAndReturn(run func(string) (*entity.Author, error)) *AuthorRepository_Store_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: author
func (_m *AuthorRepository) Update(author *entity.Author) (*entity.Author, error) {
	ret := _m.Called(author)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Author) (*entity.Author, error)); ok {
		return rf(author)
	}
	if rf, ok := ret.Get(0).(func(*entity.Author) *entity.Author); ok {
		r0 = rf(author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Author) error); ok {
		r1 = rf(author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type AuthorRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - author *entity.Author
func (_e *AuthorRepository_Expecter) Update(author interface{}) *AuthorRepository_Update_Call {
	return &AuthorRepository_Update_Call{Call: _e.mock.On("Update", author)}
}

func (_c *AuthorRepository_Update_Call) Run(run func(author *entity.Author)) *AuthorRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Author))
	})
	return _c
}

func (_c *AuthorRepository_Update_Call) Return(_a0 *entity.Author, _a1 error) *AuthorRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthorRepository_Update_Call) RunAndReturn(run func(*entity.Author) (*entity.Author, error)) *AuthorRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthorRepository creates a new instance of AuthorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorRepository {
	mock := &AuthorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
